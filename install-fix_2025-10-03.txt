Demucs.cpp 安装与修复步骤总结 - 2025-10-03

本文件总结了在 demucs.cpp 项目中执行的安装和修复步骤。

1.  **项目构建**:
    *   通过分析项目结构，确认为 CMake 构建系统。
    *   阅读 `README.md` 文件获取官方构建指南。
    *   执行了以下命令来编译项目：
        ```sh
        mkdir -p build && cd build && cmake .. && make -j16
        ```
    *   编译成功，生成了 `demucs.cpp.main` 等多个可执行文件。

2.  **模型权重下载**:
    *   根据 `README.md` 的指引，从 Hugging Face 下载预转换的 ggml 模型权重。
    *   执行了 `wget` 命令，将所有模型文件下载到 `ggml-demucs/` 目录下。下载的模型包括：
        *   `ggml-model-hdemucs_mmi-v3-f16.bin`
        *   `ggml-model-htdemucs-4s-f16.bin`
        *   `ggml-model-htdemucs-6s-f16.bin`
        *   `ggml-model-htdemucs_ft_bass-4s-f16.bin`
        *   `ggml-model-htdemucs_ft_drums-4s-f16.bin`
        *   `ggml-model-htdemucs_ft_other-4s-f16.bin`
        *   `ggml-model-htdemucs_ft_vocals-4s-f16.bin`

3.  **运行推理 (被取消)**:
    *   用户提供了音频文件 `priceless.mp3`。
    *   准备执行以下命令进行音源分离：
        ```sh
        mkdir -p demucs-out-cpp && ./build/demucs.cpp.main ./ggml-demucs/ggml-model-htdemucs-4s-f16.bin /home/claude-ft/demucs.cpp/priceless.mp3 ./demucs-out-cpp/
        ```
    *   该操作在执行前被用户取消。

4.  **执行测试**:
    *   用户要求执行项目中的测试。
    *   通过分析 `CMakeLists.txt` 文件，确定测试命令为 `./build/demucs.cpp.test`。
    *   初次尝试在项目根目录下执行测试，但由于测试代码中的相对路径问题，导致测试失败，提示“文件未找到”。
    *   经过分析，确定需要将工作目录切换到 `build` 目录下才能正确解析测试文件所需的相对路径。
    *   最终，在 `build` 目录下成功执行了测试，所有 24 个测试用例全部通过。

5.  **任务 B：编译 Wasm 模块 (.wasm 文件)**:
    *   目标：将 demucs.cpp 的 C++ 原始码编译成浏览器可以执行的 .wasm 文件。
    *   **安装 Emscripten SDK**:
        *   从 GitHub 克隆 `emsdk` 仓库。
        *   执行 `./emsdk install latest` 和 `./emsdk activate latest` 来安装和激活最新版本的 SDK。
    *   **编译 Wasm 模块**:
        *   初次尝试使用 `emmake make web` 命令，但因 `Makefile` 中没有 `web` 目标而失败。
        *   接着尝试使用 `emcmake` 和 `cmake` 来配置 `src_wasm` 目录下的 `CMakeLists.txt`，但在 `build` 目录中因缓存冲突而失败。
        *   创建了一个新的 `build_wasm` 目录来解决冲突。
        *   在 `build_wasm` 目录中，编译因缺少 SSE 指令集支持而失败。
        *   通过修改 `src_wasm/CMakeLists.txt` 文件，在 `CMAKE_CXX_FLAGS_RELEASE` 中添加了 `-msse -msse2 -msse3 -mssse3 -msse4.1` 标志。
        *   再次尝试在 `build_wasm` 目录中进行编译，但仍然失败。
        *   最终，通过在 `emcmake` 命令中直接传递 `CMAKE_CXX_FLAGS_RELEASE` 参数，成功编译了 Wasm 模块。
    *   **编译成功**:
        *   在 `build_wasm` 目录下成功生成了 `demucs.js` 和 `demucs.wasm` 文件。

至此，项目已成功编译，并且模型文件也已下载完毕，可以随时用于音频处理。
